package teste2;

import sun.java2d.pipe.DrawImage;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author leonardo
 */
public class View extends javax.swing.JFrame {

    private BufferedImage back1;
    private BufferedImage back2;
    private BufferedImage back3;
    private BufferedImage back4;
    private BufferedImage back0;

    private Graphics2D g1;
    private Graphics2D g0;
    private Graphics2D g2;
    private Graphics2D g3;
    private Graphics2D g4;
    
    private Vehicle vehicle = new Vehicle();
    
    private boolean[][] collision;
    public boolean left,right;
    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        try {
            back4 = ImageIO.read(getClass().getResourceAsStream("track.jpg")); //new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        back2 = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        back3 = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        back1 = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        back0 = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);

        
        collision = new boolean [back4.getWidth()][back4.getHeight()];
        
       for(int i = 0; i<back4.getWidth();i++)
        {
        	 for(int j = 0; j<back4.getHeight();j++)
             {
        		 Color mycolor = new Color(back4.getRGB(i, j));

        		 if(mycolor.equals(Color.black))
        		 {

        			 collision[i][j] = true ;
                     System.out.println("czarny jest na "+i+" " +j+" "+collision[i][j]);

        		 }
             }
        }
       
        
        
        g1 = (Graphics2D) back1.getGraphics();//1 radar
        g0 = (Graphics2D) back0.getGraphics();//2 radar
        g2 = (Graphics2D) back2.getGraphics();
        g3 = (Graphics2D) back3.getGraphics();
        g4 = (Graphics2D) back4.getGraphics();

        g4.drawImage(back4, 0, 0, getWidth(), getHeight(), null);
        
       // g1.setColor(Color.WHITE);
     //   g1.fillRect(0, 0, getWidth(), getHeight());
        g1.translate(getWidth()/2, getHeight()/2);
        g1.scale(1, -1);
        g0.translate(getWidth()/2, getHeight()/2);
        g0.scale(1, -1);
        
        //g2.setColor(Color.WHITE);
       // g2.fillRect(0, 0, getWidth(), getHeight());
        g2.translate(getWidth()/2, getHeight()/2);
        g2.scale(1, -1);

        
        new Timer().schedule(new MainLoop(), 100, 30);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 956, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void update() {
        vehicle.update();

    }

    @Override
    public void paint(Graphics g) {
        //super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        //g2d.translate(getWidth()/2, getHeight()/2);
        //g2d.scale(1, -1);

        g3.setColor(Color.WHITE);
        g3.fillRect(0, 0, getWidth(), getHeight());
        
        g2.setBackground(new Color(255, 255, 255, 0));
        g2.clearRect(-getWidth()/2, -getHeight()/2, getWidth(), getHeight());
        g1.setBackground(new Color(255, 255, 255, 0));
        g1.clearRect(-getWidth()/2, -getHeight()/2, getWidth(), getHeight());
        g0.setBackground(new Color(255, 255, 255, 0));
        g0.clearRect(-getWidth()/2, -getHeight()/2, getWidth(), getHeight());

        
        AffineTransform at = g1.getTransform();
        AffineTransform at2 = g2.getTransform();
        AffineTransform at0 = g0.getTransform();
        vehicle.draw(g2, g1,g0);


        g1.setTransform(at);
        g2.setTransform(at2);
        g0.setTransform(at0);
        
        g3.drawImage(back4, 0, 0, null);
        g3.drawImage(back2, 0, 0, null);
        g3.drawImage(back1, 0, 0, null);
        g3.drawImage(back0, 0, 0, null);
        //g2d.drawImage(back1, 0, 0, null);
        
        g2d.drawImage(back3, 0, 0, null);
    }
    
    @Override
    protected void processKeyEvent(KeyEvent e) {
        if (e.getID() == KeyEvent.KEY_PRESSED) {
            Keyboard.keydown[e.getKeyCode()] = true;
        }
        else if (e.getID() == KeyEvent.KEY_RELEASED) {
            Keyboard.keydown[e.getKeyCode()] = false;
        }
    }
    
    private class MainLoop extends TimerTask {
        @Override
        public void run() {
            update();
            repaint();
        }
    }    
        
    
}
